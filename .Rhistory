library(readr)
library(tidyr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggExtra)
library(maps)
library(RColorBrewer)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("LPIdata_Feb2016.RData")
load("puffin_GBIF.RData")
# Inspect data ----
View(head(LPIdata_Feb2016))
# Format data for analysis ----
# Transform from wide to long format
LPI_long <- gather(data = LPIdata_Feb2016, key = "year", value = "pop", select = 26:70)
# Get rid of the X in front of years
LPI_long$year <- parse_number(LPI_long$year)
# Rename variable names for consistency
names(LPI_long)
names(LPI_long) <- gsub(".", "_", names(LPI_long), fixed = TRUE)
names(LPI_long) <- tolower(names(LPI_long))
names(LPI_long)
# Create new column with genus and species together
LPI_long$genus_species_id <- paste(LPI_long$genus, LPI_long$species, LPI_long$id, sep = "_")
# Check data are displayed fine
View(LPI_long[c(1:5,500:505,1000:1005),])
# You can use [] to subset data frames [rows, columns]
# If you want all rows/columns, add a comma in the row/column location
# Get rid of strange characters like " / "
LPI_long$country_list <- gsub(",", "", LPI_long$country_list, fixed = TRUE)
LPI_long$biome <- gsub("/", "", LPI_long$biome, fixed = TRUE)
# Examine the tidy data frame
# Remove duplicate rows
LPI_long <- distinct(LPI_long)
# Remove missing / infinite data
LPI_long <- filter(LPI_long, is.finite(pop))
# Keep species with >5 years worth of data and calculate length of monitoring
LPI_long <- LPI_long %>%
group_by(., genus_species_id) %>%  # group rows so that each group is one population
mutate(., maxyear = max(year), minyear = min(year)) %>%  # Create columns for the first and most recent years that data was collected
mutate(., lengthyear = maxyear-minyear) %>%  # Create a column for the length of time data available
mutate(., scalepop = (pop-min(pop))/(max(pop)-min(pop))) %>%  # Scale population trend data
filter(., is.finite(scalepop)) %>%
filter(., lengthyear > 5) %>%  # Only keep rows with more than 5 years of data
ungroup(.)  # Remove any groupings you've greated in the pipe, not entirely necessary but it's better to be safe
# Calculate summary statistics for each biome
LPI_biome_summ <- LPI_long %>%
group_by(biome) %>%  # Group by biome
summarise(populations = n(),   # Create columns, number of populations
mean_study_length_years = mean(lengthyear),  # mean study length
max_lat = max(decimal_latitude),  # max latitude
min_lat = min(decimal_latitude),  # max longitude
dominant_sampling_method = names(which.max(table(sampling_method))),  # modal sampling method
dominant_units = names(which.max(table(units))))  # modal unit type
# Modelling population change over time ----
# Run linear models of abundance trends over time for each population and extract model coefficients
# Using lapply()
LPI_models_pipes <- LPI_long %>%
group_by(., genus_species_id, lengthyear) %>%
do(mod = lm(scalepop ~ year, data = .)) %>%  # Create a linear model for each group
mutate(., n = df.residual(mod),  # Create columns: degrees of freedom
intercept = summary(mod)$coeff[1],  # intercept coefficient
slope = summary(mod)$coeff[2],  # slope coefficient
intercept_se = summary(mod)$coeff[3],  # standard error of intercept
slope_se = summary(mod)$coeff[4],  # standard error of slope
intercept_p = summary(mod)$coeff[7],  # p value of intercept
slope_p = summary(mod)$coeff[8]) %>%  # p value of slope
ungroup() %>%
mutate(., lengthyear = lengthyear) %>%
filter(., n > 5) # Remove rows where degrees of freedom <5
