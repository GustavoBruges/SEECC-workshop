names(LPIdata_Feb2016)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("LPIdata_Feb2016.RData")
names(LPIdata_Feb2016)
View(LPIdata_Feb2016)
names(LPIdata_Feb2016)
names(LPIdata_Feb2016) <- gsub(".", "_", names(LPIdata_Feb2016), fixed = TRUE)
names(LPIdata_Feb2016)
names(LPIdata_Feb2016) <- names(LPIdata_Feb2016) %>%
gsub(".", "_", .) %>%
tolower(.)
library(dplyr)
names(LPIdata_Feb2016) <- names(LPIdata_Feb2016) %>%
gsub(".", "_", .) %>%
tolower(.)
View(LPIdata_Feb2016)
load("LPIdata_Feb2016.RData")
names(LPIdata_Feb2016) <- gsub(".", "_", names(LPIdata_Feb2016)) %>%
tolower(.)
View(LPIdata_Feb2016)
load("LPIdata_Feb2016.RData")
names(LPIdata_Feb2016) <- gsub(".", "_", names(LPIdata_Feb2016), fixed = TRUE) %>%
tolower(.)
View(LPIdata_Feb2016)
load("LPIdata_Feb2016.RData")
names(LPIdata_Feb2016) <- names(LPIdata_Feb2016) %>%
gsub(".", "_", ., fixed = TRUE) %>%
tolower(.)
View(LPIdata_Feb2016)
unique(LPIdata_Feb2016$biome)
unique(LPIdata_Feb2016$country_list)
View(LPIdata_Feb2016)
?apply
LPI_long <- LPIdata_Feb2016 %>%
gather("year", "pop", select = 26:70) %>%  # Transform to long format
mutate(year = parse_number(.$year)) %>%  # Deprecated, extract_numeric() -> parse_numeric() -> parse_number(), extract numeric from atomic
mutate(., genus_species = paste(genus, species, sep = '_')) %>%  # Create a species column by concatenating genus and species
distinct(.) %>%  # Remove duplicate rows
filter(., is.finite(pop)) %>%  # Keep only rows with a population estimate
group_by(., common_name, genus_species, id) %>%  # group rows so that each group is one population (id) from one species (species+Common.Name)
mutate(., maxyear = max(year), minyear = min(year)) %>%  # Create a column for the max and min years for each group
mutate(., lengthyear = maxyear-minyear) %>%  # Create a column for the length of time data available
ungroup(.) %>%  # Remove groupings
group_by(., common_name, genus_species, id, units) %>%  # Groups Measurement_type(Units)>population(id)>species(Common.Name+species)
mutate(., scalepop = (pop-min(pop))/(max(pop)-min(pop))) %>%  # Scale population trend from 0 to 1
filter(., is.finite(scalepop)) %>%  # Remove rows without a scalepop
mutate(., meanpop = mean(pop)) %>%  # Create column for mean population
ungroup(.) %>%
group_by(., common_name, genus_species, id) %>%
mutate(., meanpop.size = mean(meanpop)) %>%  # Create column for mean mean population
ungroup(.)
# Packages ---
library(devtools)
library(ggplot2)
library(ggmap)
library(ggExtra)
library(dplyr)
library(data.table)
library(tidyr)
library(readr)
LPI_long <- LPIdata_Feb2016 %>%
gather("year", "pop", select = 26:70) %>%  # Transform to long format
mutate(year = parse_number(.$year)) %>%  # Deprecated, extract_numeric() -> parse_numeric() -> parse_number(), extract numeric from atomic
mutate(., genus_species = paste(genus, species, sep = '_')) %>%  # Create a species column by concatenating genus and species
distinct(.) %>%  # Remove duplicate rows
filter(., is.finite(pop)) %>%  # Keep only rows with a population estimate
group_by(., common_name, genus_species, id) %>%  # group rows so that each group is one population (id) from one species (species+Common.Name)
mutate(., maxyear = max(year), minyear = min(year)) %>%  # Create a column for the max and min years for each group
mutate(., lengthyear = maxyear-minyear) %>%  # Create a column for the length of time data available
ungroup(.) %>%  # Remove groupings
group_by(., common_name, genus_species, id, units) %>%  # Groups Measurement_type(Units)>population(id)>species(Common.Name+species)
mutate(., scalepop = (pop-min(pop))/(max(pop)-min(pop))) %>%  # Scale population trend from 0 to 1
filter(., is.finite(scalepop)) %>%  # Remove rows without a scalepop
mutate(., meanpop = mean(pop)) %>%  # Create column for mean population
ungroup(.) %>%
group_by(., common_name, genus_species, id) %>%
mutate(., meanpop.size = mean(meanpop)) %>%  # Create column for mean mean population
ungroup(.)
names(LPI_long) <- gsub(".", "_", names(LPI_long), fixed = TRUE) %>%
tolower(.)
names(LPI_long) <- names(LPI_long) %>%
gsub(".", "_", ., fixed = TRUE) %>%
tolower(.)
View(LPI_long)
LPI_long$genus_species <- paste(LPI_long$genus, LPI_long$species, sep = "_")
View(LPI_long)
LPI_long$genus_species_id <- paste(LPI_long$genus, LPI_long$species, LPI_long$id, sep = "_")
View(LPI_long)
LPI_pop_summ <- LPI_long %>%
group_by(genus_species_id) %>%
summarise("mean_pop" = mean(pop))
View(LPI_pop_summ)
LPI_class_summ <- LPI_long %>%
group_by(genus_species_id, class) %>%
summarise(n = n())
ggplot(LPI_class_summ, aes(x = class, y = n)) +
geom_point(aes(colour = class), size = 2, alpha = 0.6)
LPI_class_summ <- LPI_long %>%
group_by(genus_species, class) %>%
summarise(n = n())
ggplot(LPI_class_summ, aes(x = class, y = n)) +
geom_point(aes(colour = class), size = 2, alpha = 0.6)
View(LPI_class_summ)
map_world <- borders("world", colour="gray50")
ggplot() + map_world +
geom_point(data = LPI_models_slopes, aes(x = decimal_longitude, y = decimal_latitude, colour = class))
LPI_models_slopes <- merge(LPI_long, LPI_models) %>%
select(genus_species_id, class, id, units, mod, n,  intercept, slope, intercept_se, slope_se,
intercept_p, slope_p, decimal_latitude, decimal_longitude, biome, realm,
maxyear, minyear, lengthyear, meanpop, meanpop.size, country_list,
location_of_population, biome, realm, region, system, native, alien, pop) %>% # select only useful columns
distinct(.)  # Remove any duplicate rows
group_by(., common_name, genus_species_id, units) %>%  # Groups Measurement_type(Units)>population(id)>species(Common.Name+species)
do(mod = lm(scalepop~year, data = .)) %>%  # Create a linear model for each group
mutate(., n = df.residual(mod),  # Create columns: degrees of freedom
intercept=summary(mod)$coeff[1],  # intercept coefficient
slope=summary(mod)$coeff[2],  # slope coefficient
intercept_se=summary(mod)$coeff[3],  # standard error of intercept
slope_se=summary(mod)$coeff[4],  # standard error of slope
intercept_p=summary(mod)$coeff[7],  # p value of intercept
slope_p=summary(mod)$coeff[8]) %>%  # p value of slope
filter(., n > 5) # Remove rows where degrees of freedom <5
LPI_models <- LPI_long %>%
group_by(., common_name, genus_species_id, units) %>%  # Groups Measurement_type(Units)>population(id)>species(Common.Name+species)
do(mod = lm(scalepop~year, data = .)) %>%  # Create a linear model for each group
mutate(., n = df.residual(mod),  # Create columns: degrees of freedom
intercept=summary(mod)$coeff[1],  # intercept coefficient
slope=summary(mod)$coeff[2],  # slope coefficient
intercept_se=summary(mod)$coeff[3],  # standard error of intercept
slope_se=summary(mod)$coeff[4],  # standard error of slope
intercept_p=summary(mod)$coeff[7],  # p value of intercept
slope_p=summary(mod)$coeff[8]) %>%  # p value of slope
filter(., n > 5) # Remove rows where degrees of freedom <5
# Merge data frames back together
LPI_models_slopes <- merge(LPI_long, LPI_models) %>%
select(genus_species_id, class, id, units, mod, n,  intercept, slope, intercept_se, slope_se,
intercept_p, slope_p, decimal_latitude, decimal_longitude, biome, realm,
maxyear, minyear, lengthyear, meanpop, meanpop.size, country_list,
location_of_population, biome, realm, region, system, native, alien, pop) %>% # select only useful columns
distinct(.)  # Remove any duplicate rows
map_world <- borders("world", colour="gray50")
ggplot() + map_world +
geom_point(data = LPI_models_slopes, aes(x = decimal_longitude, y = decimal_latitude, colour = class))
LPI_models_slopes <- merge(LPI_long, LPI_models) %>%
select(genus_species_id, class, id, units, mod, n,  intercept, slope, intercept_se, slope_se,
intercept_p, slope_p, decimal_latitude, decimal_longitude, biome, realm,
maxyear, minyear, lengthyear, meanpop, meanpop.size, country_list,
location_of_population, biome, realm, region, system, native, alien, pop) %>% # select only useful columns
distinct(.)  # Remove any duplicate rows
LPI_models_slopes <- merge(LPI_long, LPI_models) %>%
select(genus_species_id, class, id, units, mod, n,  intercept, slope, intercept_se, slope_se,
intercept_p, slope_p, decimal_latitude, decimal_longitude, biome, realm,
maxyear, minyear, lengthyear, meanpop, meanpop_size, country_list,
location_of_population, biome, realm, region, system, native, alien, pop) %>% # select only useful columns
distinct(.)  # Remove any duplicate rows
map_world <- borders("world", colour="gray50")
ggplot() + map_world +
geom_point(data = LPI_models_slopes, aes(x = decimal_longitude, y = decimal_latitude, colour = class))
ggplot(LPI_models_slopes, aes(x = lengthyear, y = slope)) +
geom_point()
ggplot(LPI_models_slopes, aes(x=slope, fill=system)) + geom_density(alpha=.3)
ggplot(LPI_models_slopes, aes(x=slope, fill=biome)) + geom_density(alpha=.3)
ggplot(LPI_models_slopes, aes(x=slope, fill=realm)) + geom_density(alpha=.3)
ggplot(LPI_models_slopes, aes(x = lengthyear, y = slope, group = Class)) +
geom_point()
ggplot(LPI_models_slopes, aes(x = lengthyear, y = slope, group = class)) +
geom_point()
ggplot(LPI_models_slopes, aes(x = lengthyear, y = slope)) +
geom_point(aes(colour = class))
ggplot(LPI_models_slopes, aes(x = lengthyear, y = slope)) +
geom_point(aes(colour = class), position = jitter)
ggplot(LPI_models_slopes, aes(x = lengthyear, y = slope)) +
geom_point(aes(colour = class), position = "jitter")
ggplot(LPI_models_slopes, aes(x = lengthyear, y = slope)) +
geom_point(aes(colour = class), position = "jitter") +
theme(legend.position = "none")
